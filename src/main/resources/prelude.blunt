compare x y = primitiveCompare (x,y)
x == y  = primitiveOpEq (x,y)
x * y   = primitiveOpMultiply (x,y)
x / y   = primitiveOpDivide (x,y)
x + y   = primitiveOpPlus (x,y)
x - y   = primitiveOpMinus (x,y)
mod x y = primitiveMod (x,y)

data Boolean = False | True deriving (Eq, Ord)

data Maybe a = Just a | Nothing

data Either a b = Left a | Right b

data Ordering = LT | EQ | GT deriving (Eq, Ord)

x || y = if x then True else y

x && y = if x then y else False

not x = if x then False else True

x <  y  = compare x y == LT
x <= y  = let r = compare x y in r == EQ || r == LT
x >  y  = compare x y == GT
x >= y  = let r = compare x y in r == EQ || r == GT

nil? [] = True
nil? _  = False

fst (x,_) = x

snd (_,x) = x

head (x:_) = x
head []     = error "can't get head of empty list"

tail (_:xs) = xs
tail []     = error "can't get tail of empty list"

tails [] = [[]]
tails xs = xs : tails (tail xs)

id x = x

const x y = x

f . g = \x -> f (g x)

f $ x = f x

flip f x y = f y x

foldr f e []     = e
foldr f e (x:xs) = f x (foldr f e xs)

foldl f e []     = e
foldl f e (x:xs) = foldl f (f e x) xs

foldl1 f ls = foldl f (head ls) (tail ls)

sum = foldl (+) 0

product = foldl (*) 1

map _ []     = []
map f (x:xs) = f x : map f xs

filter _ []     = []
filter p (x:xs) = if p x then x : filter p xs else filter p xs

reverse = foldl (flip (:)) []

length = foldl (\x y -> x + 1) 0

square x = x * x

range2 step min max =
  if min < max
    then min : (range2 step (min + step) max)
    else []

range = range2 1

and = foldr (&&) True

or = foldr (||) False

zero? x = x == 0

take _ []     = []
take 0 _      = []
take n (x:xs) = x : take (n-1) xs

drop _ []     = []
drop 0 xs     = xs
drop n (_:xs) = drop (n-1) xs

takeWhile p []     = []
takeWhile p (x:xs) = if p x then x : takeWhile p xs else []

dropWhile p []     = []
dropWhile p (x:xs) = if p x then dropWhile p xs else (x:xs)

all p = foldl (\x y -> p y && x) True

any p = foldl (\x y -> p y || x) False

xs ++ ys = foldr (:) ys xs

concat = foldr (++) []

concatMap f = concat . map f

curry f x y = f (x, y)

uncurry f p = f (fst p) (snd p)

zipWith f (x:xs) (y:ys) = f x y : zipWith f xs ys
zipWith f _      _      = []

zipWith3 f (x:xs) (y:ys) (z:zs) = f x y z : zipWith3 f xs ys zs
zipWith3 f _      _      _      = []

zip = zipWith (\x y -> (x,y))

zip3 = zipWith3 (\x y z -> (x, y, z))

elem x = any ((==) x)

notElem x = not . elem x

span p ls = (takeWhile p ls, dropWhile p ls)

break p = span (not . p)

even? x = mod x 2 == 0

odd? = not . even?

x /= y = not (x == y)

min x y = if x < y then x else y

max x y = if x > y then x else y

minimum = foldl1 min

maximum = foldl1 max

sort []     = []
sort (x:xs) = sort (filter (\y -> y < x) xs) ++ (x : sort (filter (\y -> y >= x) xs))

delete x [] = []
delete x (y:ys) = if x == y then ys else y : delete x ys

(\\) = foldr delete

maybe e f (Just x) = f x
maybe e f Nothing  = e

xs !! n =
  case (xs,n) of
    ([],_)   -> error "index out of bounds"
    (x:_,0)  -> x
    (_:xs,n) -> xs !! (n-1)

init []     = error "empty list"
init [_]    = []
init (x:xs) = x : init xs

last []     = error "empty list"
last [x]    = x
last (_:xs) = last xs

until p f x = if p x
                then x
                else until p f (f x)

either f _ (Left x)  = f x
either _ f (Right x) = f x

replicate 0 _ = []
replicate n x = x : replicate (n-1) x

lookup k []          = Nothing
lookup k ((k',v):xs) = if k == k' then Just v else lookup k xs

splitAt n xs = (take n xs, drop n xs)

scanl _ x []     = [x]
scanl f x (y:ys) = x : scanl f (f x y) ys

scanl1 _ []      = []
scanl1 f (x:xs)  = scanl f x xs

scanr _ x []     = [x]
scanr f x (y:ys) = foldr f x (y:ys) : scanr f x ys

-- scanr1 :: (a -> a -> a) -> [a] -> [a]
-- lines :: String -> [String]
-- unlines :: [String] -> String
-- words :: String -> [String]
-- unwords :: [String] -> String
-- unzip :: [(a, b)] -> ([a], [b])
-- unzip3 :: [(a, b, c)] -> ([a], [b], [c])
